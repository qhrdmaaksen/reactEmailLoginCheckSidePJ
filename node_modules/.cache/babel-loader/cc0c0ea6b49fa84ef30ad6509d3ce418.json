{"ast":null,"code":"var _jsxFileName = \"D:\\\\intellijProjects\\\\react-emailLoginSidePJ\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from \"./Store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return (\n    /*#__PURE__*/\n\n    /*AuthContext 를 Wrapper 로 사용(root 수준 컴포넌트로 반환하기때문)\n    * MainHeader 뿐만 아니라 Login 및 Home 컴포넌트 등 모든 자식은 AuthContext 에 접근할 수 있음\n    * */\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        /*객체 전달 가능하며 해당 객체를 변경 할 수 있다 ex) state 나 앱컴포넌트를 통해 변경경될때마다 새 값이 모든 소비 컴포넌트에 전달됨*/\n        isLoggedIn: isLoggedIn,\n\n        /*value 객체는 isLoggedIn 이 변경 될때마다 리액트에의해 업데이트됨 그리고 새로운 객체 새로운 컨텍스트 객체는 모든 리스닝 컴포넌트로 전달됨*/\n        onLogout: logoutHandler\n        /*AuthContext 에 wrapper 되어있는 곳에서 onLogout prop 을 사용 할 수있다*/\n\n      },\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: loginHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 22\n        }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n          onLogout: logoutHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, this)\n  );\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContext","App","isLoggedIn","onLogout","logoutHandler","loginHandler"],"sources":["D:/intellijProjects/react-emailLoginSidePJ/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from \"./Store/auth-context\";\n\nfunction App() {\n\treturn (\n\t\t\t/*AuthContext 를 Wrapper 로 사용(root 수준 컴포넌트로 반환하기때문)\n\t\t\t* MainHeader 뿐만 아니라 Login 및 Home 컴포넌트 등 모든 자식은 AuthContext 에 접근할 수 있음\n\t\t\t* */\n\t\t\t<AuthContext.Provider value={{ /*객체 전달 가능하며 해당 객체를 변경 할 수 있다 ex) state 나 앱컴포넌트를 통해 변경경될때마다 새 값이 모든 소비 컴포넌트에 전달됨*/\n\t\t\t\tisLoggedIn: isLoggedIn, /*value 객체는 isLoggedIn 이 변경 될때마다 리액트에의해 업데이트됨 그리고 새로운 객체 새로운 컨텍스트 객체는 모든 리스닝 컴포넌트로 전달됨*/\n\t\t\t\tonLogout: logoutHandler, /*AuthContext 에 wrapper 되어있는 곳에서 onLogout prop 을 사용 할 수있다*/\n\t\t\t}}>\n\t\t\t\t<MainHeader/>\n\t\t\t\t<main>\n\t\t\t\t\t{!isLoggedIn && <Login onLogin={loginHandler}/>}\n\t\t\t\t\t{isLoggedIn && <Home onLogout={logoutHandler}/>}\n\t\t\t\t</main>\n\t\t\t</AuthContext.Provider>\n\t);\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;;AAEA,SAASC,GAAT,GAAe;EACd;IAAA;;IACE;AACH;AACA;IACG,QAAC,WAAD,CAAa,QAAb;MAAsB,KAAK,EAAE;QAAE;QAC9BC,UAAU,EAAEA,UADgB;;QACJ;QACxBC,QAAQ,EAAEC;QAAe;;MAFG,CAA7B;MAAA,wBAIC,QAAC,UAAD;QAAA;QAAA;QAAA;MAAA,QAJD,eAKC;QAAA,WACE,CAACF,UAAD,iBAAe,QAAC,KAAD;UAAO,OAAO,EAAEG;QAAhB;UAAA;UAAA;UAAA;QAAA,QADjB,EAEEH,UAAU,iBAAI,QAAC,IAAD;UAAM,QAAQ,EAAEE;QAAhB;UAAA;UAAA;UAAA;QAAA,QAFhB;MAAA;QAAA;QAAA;QAAA;MAAA,QALD;IAAA;MAAA;MAAA;MAAA;IAAA;EAJF;AAeA;;KAhBQH,G;AAkBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}